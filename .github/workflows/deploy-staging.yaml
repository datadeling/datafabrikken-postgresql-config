name: Deploy to production

on:
  pull_request:
    types: [ready_for_review, opened, reopened, synchronize]
    branches:
      - main

jobs:
  deploy-staging:
    name: Deploy postgresql-sqlproxy to staging environment when pull request is created
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create yaml file from secret
        id: write_file
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'secret.yaml'
          encodedString: ${{ secrets.DATAFABRIKKEN_POSTGRESQL_DEV }}

      - name: Apply Helm template
        run: |
          helm template -f ${{ steps.write_file.outputs.filePath }} ./helm-sources/ > ./kubectlapply.yaml
          chmod o+w ./kubectlapply.yaml
          cat kubectlapply.yaml

      - name: Auth gcloud CLI for deploy
        uses: google-github-actions/auth@main
        with:
          credentials_json: ${{ secrets.DATAFABRIKKEN_DEV_AUTODEPLOY }}

      - name: Get credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: datafabrikken-dev
          location: europe-north1-a    

      - name: Deploy to GCP & check status
        run: |
          kubectl apply -f ./kubectlapply.yaml --force
          if ! kubectl --namespace=staging rollout status deployment postgresql-sqlproxy; then
            kubectl --namespace=staging rollout undo deployment postgresql-sqlproxy
            kubectl --namespace=staging rollout status deployment postgresql-sqlproxy
            exit 1
          fi

      - name: Notify slack
        uses: 8398a7/action-slack@v3
        with:
          mention: 'channel'
          if_mention: failure
          status: ${{ job.status }}
          author_name: 'Application: postgresql-sqlproxy | Environment: staging'
          fields: commit,author,workflow,message
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
